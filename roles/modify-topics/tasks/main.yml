# (c) 2016 DataNexus Inc.  All Rights Reserved
---
# Contains tasks to create new topics or delete existing ones
- block:
  # First, sort out the appropriate command that should be used to modify
  # topics on this cluster
  - name: Find kafka-topics command (if exists)
    shell: 'which kafka-topics'
    register: command_result
    failed_when:
      - "'no kafka-topics in' not in command_result.stderr"
      - "command_result.rc != 0"
    run_once: true
  - name: Set kafka_topics_cmd from output
    set_fact:
      kafka_topics_cmd: "{{command_result.stdout}}"
      lcl_zk_shell_cmd: "{{(command_result.stdout | dirname)}}/zookeeper-shell"
    when: command_result.rc == 0
    run_once: true
  - name: Setup default kafka_topics_cmd ({{kafka_dir}}/bin/kafka-topics.sh) if not found
    set_fact:
      kafka_topics_cmd: "{{kafka_dir}}/bin/kafka-topics.sh"
      lcl_zk_shell_cmd: "{{kafka_dir}}/bin/zookeeper-shell.sh"
    run_once: true
    when: kafka_topics_cmd is undefined
  - name: Set path to binaries for distribution
    set_fact:
      kafka_bin_dir: "{{kafka_topics_cmd | dirname}}"
    run_once: true
  # Next, pick one of our Zookeeper nodes to use for the commands we'll be running
  - set_fact:
      zk_node_str: "{{(zk_nodes | default(['localhost'])) | join(':2181,')}}:2181"
  # If we're creating a new set of topics, then just run the appropriate command on one of
  # the nodes in our Kafka cluster
  - name: Adding topics to the cluster
    shell: "{{kafka_topics_cmd}} --create --zookeeper={{zk_node_str}} --replication-factor={{action_hash.repl_factor | default(1)}} --partitions={{action_hash.partitions | default(1)}} --topic={{item}}"
    with_items: "{{action_hash.topic_list | default([])}}"
    when: action_hash.action == 'create'
    run_once: true
  # Otherwise, if we're removing a topic there's a bit of work to do
  - block:
    # First, mark the topic for deletion by running the appropriate command on one of
    # the nodes in our Kafka cluster
    - name: Remove topics from the Kafka cluster
      shell: "{{kafka_topics_cmd}} --delete --zookeeper={{zk_node_str}} --topic={{item}}"
      register: command_result
      failed_when:
        - ('Topic ' + item + ' does not exist') not in command_result.stderr
        - ('Topic ' + item + ' is marked for deletion') not in command_result.stderr
        - ('Topic ' + item + ' is already marked for deletion') not in command_result.stderr
        - "command_result.rc != 0"
      with_items: "{{action_hash.topic_list | default([])}}"
      run_once: true
    # now that the topics have been marked for deletion, roll through the
    # members of the cluster and remove the topic directories from each of
    # them (in turn); the metadata associated with those topics will also be
    # removed from the Zookeeper instance/ensemble, but only after the topic
    # directories have been removed from the first node in the cluster
    - set_fact:
        last_host: "{{ansible_play_hosts[(ansible_play_hosts|length)-1]}}"
    - name: Perform rolling removal of topic directories and metadata
      include: ../files/remove_topics_from_host.yml static=no
      run_once: true
      delegate_to: "{{current_host}}"
      with_items: "{{ansible_play_hosts}}"
      loop_control:
        loop_var: current_host
    # Finally, if this is an Apache Kafka distribution, delete the topic one more time
    # (this should ensure it disappears from such instances; without this step it seems
    # to come back in a "marked for deletion" state if the topic is created again later)
    - name: For Apache Kafka instances/clusters, remove topics again
      shell: "{{kafka_topics_cmd}} --delete --zookeeper={{zk_node_str}} --topic={{item}}"
      register: command_result
      failed_when:
        - ('Topic ' + item + ' does not exist') not in command_result.stderr
        - ('Topic ' + item + ' is marked for deletion') not in command_result.stderr
        - ('Topic ' + item + ' is already marked for deletion') not in command_result.stderr
        - "command_result.rc != 0"
      with_items: "{{action_hash.topic_list | default([])}}"
      run_once: true
      when: kafka_distro == 'apache'
    when: action_hash.action == 'delete'
  become: true
  become_user: "{{kafka_user}}"
